// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace apps.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200617005631_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Models.Affectation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdAgentSi")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdCollaborateur")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdEmplacement")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdEquipement")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdAgentSi");

                    b.HasIndex("IdCollaborateur");

                    b.HasIndex("IdEmplacement");

                    b.HasIndex("IdEquipement");

                    b.ToTable("Affectations");
                });

            modelBuilder.Entity("Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ordinateur",
                            Nom = "DESKTOP"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ordinateur",
                            Nom = "LAPTOP"
                        });
                });

            modelBuilder.Entity("Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdReceiver")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdSender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTicketSupport")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Vu")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdReceiver");

                    b.HasIndex("IdSender");

                    b.HasIndex("IdTicketSupport");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2019, 12, 17, 1, 28, 21, 987, DateTimeKind.Local).AddTicks(2584),
                            IdReceiver = 5,
                            IdSender = 6,
                            IdTicketSupport = 3,
                            Message = "voluptate",
                            Vu = true
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2019, 8, 2, 19, 50, 17, 562, DateTimeKind.Local).AddTicks(4801),
                            IdReceiver = 3,
                            IdSender = 5,
                            IdTicketSupport = 10,
                            Message = "quisquam",
                            Vu = true
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 1, 22, 13, 30, 48, 261, DateTimeKind.Local).AddTicks(359),
                            IdReceiver = 2,
                            IdSender = 8,
                            IdTicketSupport = 2,
                            Message = "sapiente",
                            Vu = true
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2019, 9, 23, 4, 58, 0, 744, DateTimeKind.Local).AddTicks(6674),
                            IdReceiver = 8,
                            IdSender = 5,
                            IdTicketSupport = 9,
                            Message = "sit",
                            Vu = true
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2019, 9, 5, 20, 38, 21, 144, DateTimeKind.Local).AddTicks(404),
                            IdReceiver = 4,
                            IdSender = 9,
                            IdTicketSupport = 8,
                            Message = "saepe",
                            Vu = false
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2020, 4, 30, 18, 17, 16, 485, DateTimeKind.Local).AddTicks(1438),
                            IdReceiver = 10,
                            IdSender = 9,
                            IdTicketSupport = 2,
                            Message = "rerum",
                            Vu = true
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2019, 11, 8, 19, 9, 51, 100, DateTimeKind.Local).AddTicks(5054),
                            IdReceiver = 9,
                            IdSender = 4,
                            IdTicketSupport = 1,
                            Message = "sit",
                            Vu = true
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2019, 9, 17, 6, 37, 45, 794, DateTimeKind.Local).AddTicks(4141),
                            IdReceiver = 8,
                            IdSender = 8,
                            IdTicketSupport = 2,
                            Message = "distinctio",
                            Vu = true
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2019, 8, 14, 4, 54, 56, 20, DateTimeKind.Local).AddTicks(4354),
                            IdReceiver = 1,
                            IdSender = 1,
                            IdTicketSupport = 9,
                            Message = "sapiente",
                            Vu = false
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2019, 12, 9, 18, 33, 31, 834, DateTimeKind.Local).AddTicks(3195),
                            IdReceiver = 4,
                            IdSender = 2,
                            IdTicketSupport = 2,
                            Message = "dolorem",
                            Vu = false
                        });
                });

            modelBuilder.Entity("Models.Constucteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Constucteurs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Hewlett-Packard",
                            Nom = "HP"
                        },
                        new
                        {
                            Id = 2,
                            Description = "DELL",
                            Nom = "DELL"
                        },
                        new
                        {
                            Id = 3,
                            Description = "TOSHIBA",
                            Nom = "TOSHIBA"
                        },
                        new
                        {
                            Id = 4,
                            Description = "SHARP",
                            Nom = "SHARP"
                        },
                        new
                        {
                            Id = 5,
                            Description = "CANON",
                            Nom = "CANON"
                        },
                        new
                        {
                            Id = 6,
                            Description = "CISCO",
                            Nom = "CISCO"
                        },
                        new
                        {
                            Id = 7,
                            Description = "FORTIGATE",
                            Nom = "FORTIGATE"
                        },
                        new
                        {
                            Id = 8,
                            Description = "APPLE",
                            Nom = "APPLE"
                        },
                        new
                        {
                            Id = 9,
                            Description = "SONY",
                            Nom = "SONY"
                        },
                        new
                        {
                            Id = 10,
                            Description = "ORAY",
                            Nom = "ORAY"
                        },
                        new
                        {
                            Id = 11,
                            Description = "EPSON",
                            Nom = "EPSON"
                        },
                        new
                        {
                            Id = 12,
                            Description = "BROTHER",
                            Nom = "BROTHER"
                        },
                        new
                        {
                            Id = 13,
                            Description = "UNO",
                            Nom = "UNO"
                        },
                        new
                        {
                            Id = 14,
                            Description = "IBM",
                            Nom = "IBM"
                        },
                        new
                        {
                            Id = 15,
                            Description = "APC",
                            Nom = "APC"
                        },
                        new
                        {
                            Id = 16,
                            Description = "SAMSUNG",
                            Nom = "SAMSUNG"
                        },
                        new
                        {
                            Id = 17,
                            Description = "POLYCOM",
                            Nom = "POLYCOM"
                        },
                        new
                        {
                            Id = 18,
                            Description = "ZEBRA",
                            Nom = "ZEBRA"
                        },
                        new
                        {
                            Id = 19,
                            Description = "HONEYWELL",
                            Nom = "HONEYWELL"
                        },
                        new
                        {
                            Id = 20,
                            Description = "LG",
                            Nom = "LG"
                        });
                });

            modelBuilder.Entity("Models.Departement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Etage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Etage = "E1",
                            Nom = "DIPA-RABAT"
                        },
                        new
                        {
                            Id = 2,
                            Etage = "E4",
                            Nom = "DIPE-RABAT"
                        },
                        new
                        {
                            Id = 3,
                            Etage = "E4",
                            Nom = "DRSI-RABAT"
                        },
                        new
                        {
                            Id = 4,
                            Etage = "E4",
                            Nom = "CENTRE"
                        });
                });

            modelBuilder.Entity("Models.Emplacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeEmplacement")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdDepartement")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartement");

                    b.ToTable("Emplacements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodeEmplacement = "ANDA/R/E4/B01",
                            Description = "BUREAU DIRECTION E4",
                            IdDepartement = 2
                        },
                        new
                        {
                            Id = 2,
                            CodeEmplacement = "ANDA/R/E4/B02",
                            Description = "BUREAU ASSISTANAT DE DIRECTION",
                            IdDepartement = 2
                        },
                        new
                        {
                            Id = 3,
                            CodeEmplacement = "ANDA/R/E4/B03",
                            Description = "BUREAU ASSISTANAT TRESORIER PAYEUR",
                            IdDepartement = 3
                        },
                        new
                        {
                            Id = 4,
                            CodeEmplacement = "ANDA/R/E4/OS6",
                            Description = "PLATEAU SSI",
                            IdDepartement = 4
                        },
                        new
                        {
                            Id = 5,
                            CodeEmplacement = "ANDA/R/E4/OS4",
                            Description = "PLATEAU SAMG",
                            IdDepartement = 3
                        },
                        new
                        {
                            Id = 6,
                            CodeEmplacement = "ANDA/R/E4/OS5",
                            Description = "PLATEAU SBC",
                            IdDepartement = 1
                        },
                        new
                        {
                            Id = 7,
                            CodeEmplacement = "ANDA/R/E4/OS2",
                            Description = "PLATEAU SRH",
                            IdDepartement = 1
                        });
                });

            modelBuilder.Entity("Models.Equipement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAchat")
                        .HasColumnType("TEXT");

                    b.Property<string>("EtatActuel")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdCategorie")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdConstucteur")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdFournisseur")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdStatut")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("NInventaire")
                        .HasColumnType("TEXT");

                    b.Property<string>("NSerie")
                        .HasColumnType("TEXT");

                    b.Property<int>("PrixUnitaireHT")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefAchat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarques")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdCategorie");

                    b.HasIndex("IdConstucteur");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdStatut");

                    b.ToTable("Equipements");
                });

            modelBuilder.Entity("Models.EquipementInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("InfoSystemeHtml")
                        .HasColumnType("TEXT");

                    b.Property<string>("NSerie")
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftwareHtml")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EquipementInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 6, 10, 4, 13, 5, 269, DateTimeKind.Local).AddTicks(2554),
                            InfoSystemeHtml = "consectetur",
                            NSerie = "quibusdam"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 4, 28, 3, 34, 32, 179, DateTimeKind.Local).AddTicks(9542),
                            InfoSystemeHtml = "voluptas",
                            NSerie = "cumque"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 4, 15, 11, 57, 26, 946, DateTimeKind.Local).AddTicks(4656),
                            InfoSystemeHtml = "aut",
                            NSerie = "dolor"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 1, 2, 1, 36, 30, 284, DateTimeKind.Local).AddTicks(6427),
                            InfoSystemeHtml = "exercitationem",
                            NSerie = "iusto"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2019, 10, 6, 16, 49, 32, 934, DateTimeKind.Local).AddTicks(4588),
                            InfoSystemeHtml = "cumque",
                            NSerie = "sunt"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2020, 6, 6, 9, 20, 9, 863, DateTimeKind.Local).AddTicks(3969),
                            InfoSystemeHtml = "quo",
                            NSerie = "laborum"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2020, 5, 23, 3, 57, 50, 357, DateTimeKind.Local).AddTicks(7474),
                            InfoSystemeHtml = "soluta",
                            NSerie = "dolor"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2019, 12, 18, 5, 44, 9, 65, DateTimeKind.Local).AddTicks(9825),
                            InfoSystemeHtml = "facere",
                            NSerie = "molestias"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2020, 1, 14, 12, 52, 1, 867, DateTimeKind.Local).AddTicks(8443),
                            InfoSystemeHtml = "ut",
                            NSerie = "et"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2020, 2, 14, 7, 15, 44, 525, DateTimeKind.Local).AddTicks(9424),
                            InfoSystemeHtml = "velit",
                            NSerie = "voluptatum"
                        });
                });

            modelBuilder.Entity("Models.Fonction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fonctions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "ASSISTANCE"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "ASSISTANT"
                        },
                        new
                        {
                            Id = 3,
                            Nom = "ASSISTANTE"
                        },
                        new
                        {
                            Id = 4,
                            Nom = "CADRE"
                        },
                        new
                        {
                            Id = 5,
                            Nom = "CHAUFFEUR"
                        },
                        new
                        {
                            Id = 6,
                            Nom = "CHEF DE DEPARTEMENT"
                        },
                        new
                        {
                            Id = 7,
                            Nom = "CHEF DE SERVICE"
                        },
                        new
                        {
                            Id = 8,
                            Nom = "DIRECTRICE"
                        },
                        new
                        {
                            Id = 9,
                            Nom = "Trésorier "
                        },
                        new
                        {
                            Id = 10,
                            Nom = "VIRTUAL"
                        });
                });

            modelBuilder.Entity("Models.Fournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tel")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Fournisseurs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "email1@angular.io",
                            Fax = "null",
                            Nom = "BUCLINTEC",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 2,
                            Email = "email2@angular.io",
                            Fax = "null",
                            Nom = "PC MEMORIA",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 3,
                            Email = "email3@angular.io",
                            Fax = "null",
                            Nom = "BESTMARK",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 4,
                            Email = "email4@angular.io",
                            Fax = "null",
                            Nom = "COD2I",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 5,
                            Email = "email5@angular.io",
                            Fax = "null",
                            Nom = "REPER",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 6,
                            Email = "email6@angular.io",
                            Fax = "null",
                            Nom = "UFP MAROC",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 7,
                            Email = "email7@angular.io",
                            Fax = "null",
                            Nom = "ADN SYSTEM",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 8,
                            Email = "email8@angular.io",
                            Fax = "null",
                            Nom = "ETCE INFO",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 9,
                            Email = "email9@angular.io",
                            Fax = "null",
                            Nom = "CBI",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 10,
                            Email = "email10@angular.io",
                            Fax = "null",
                            Nom = "ALPHA BUREAU",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 11,
                            Email = "email11@angular.io",
                            Fax = "null",
                            Nom = "PLANET TV SAT",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 12,
                            Email = "email12@angular.io",
                            Fax = "null",
                            Nom = "LATCO",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 13,
                            Email = "email13@angular.io",
                            Fax = "null",
                            Nom = "SESA",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 14,
                            Email = "email14@angular.io",
                            Fax = "null",
                            Nom = "TOP INVEST RYAD",
                            Tel = "null"
                        },
                        new
                        {
                            Id = 15,
                            Email = "email15@angular.io",
                            Fax = "null",
                            Nom = "SHOP BUSINESS AND TECHNOLOGIE",
                            Tel = "null"
                        });
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "agentSi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdDepartement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartement");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdDepartement = 1,
                            Nom = "ANDA"
                        },
                        new
                        {
                            Id = 2,
                            IdDepartement = 2,
                            Nom = "DG/"
                        },
                        new
                        {
                            Id = 3,
                            IdDepartement = 3,
                            Nom = "DIPA/"
                        },
                        new
                        {
                            Id = 7,
                            IdDepartement = 4,
                            Nom = "DIPE/"
                        });
                });

            modelBuilder.Entity("Models.Statut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Statuts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "null",
                            Nom = "Déplacement "
                        },
                        new
                        {
                            Id = 2,
                            Description = "null",
                            Nom = "Local"
                        });
                });

            modelBuilder.Entity("Models.TicketSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdCollaborateur")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priorite")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdCollaborateur");

                    b.ToTable("TicketSupports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreation = new DateTime(2020, 4, 11, 11, 7, 42, 389, DateTimeKind.Local).AddTicks(7064),
                            IdCollaborateur = 2,
                            IsClosed = false,
                            Priorite = "at",
                            Question = "consequatur"
                        },
                        new
                        {
                            Id = 2,
                            DateCreation = new DateTime(2020, 4, 22, 12, 29, 54, 311, DateTimeKind.Local).AddTicks(9331),
                            IdCollaborateur = 1,
                            IsClosed = false,
                            Priorite = "omnis",
                            Question = "occaecati"
                        },
                        new
                        {
                            Id = 3,
                            DateCreation = new DateTime(2019, 7, 3, 6, 59, 55, 499, DateTimeKind.Local).AddTicks(3543),
                            IdCollaborateur = 5,
                            IsClosed = false,
                            Priorite = "dolor",
                            Question = "impedit"
                        },
                        new
                        {
                            Id = 4,
                            DateCreation = new DateTime(2019, 8, 5, 21, 52, 43, 343, DateTimeKind.Local).AddTicks(8910),
                            IdCollaborateur = 9,
                            IsClosed = true,
                            Priorite = "et",
                            Question = "natus"
                        },
                        new
                        {
                            Id = 5,
                            DateCreation = new DateTime(2019, 7, 20, 17, 29, 35, 444, DateTimeKind.Local).AddTicks(6486),
                            IdCollaborateur = 7,
                            IsClosed = true,
                            Priorite = "hic",
                            Question = "neque"
                        },
                        new
                        {
                            Id = 6,
                            DateCreation = new DateTime(2019, 12, 9, 0, 25, 27, 205, DateTimeKind.Local).AddTicks(1589),
                            IdCollaborateur = 8,
                            IsClosed = false,
                            Priorite = "odio",
                            Question = "quis"
                        },
                        new
                        {
                            Id = 7,
                            DateCreation = new DateTime(2020, 2, 25, 14, 2, 32, 144, DateTimeKind.Local).AddTicks(3397),
                            IdCollaborateur = 1,
                            IsClosed = false,
                            Priorite = "fugiat",
                            Question = "eos"
                        },
                        new
                        {
                            Id = 8,
                            DateCreation = new DateTime(2020, 1, 6, 18, 7, 51, 683, DateTimeKind.Local).AddTicks(6607),
                            IdCollaborateur = 2,
                            IsClosed = false,
                            Priorite = "magni",
                            Question = "ad"
                        },
                        new
                        {
                            Id = 9,
                            DateCreation = new DateTime(2020, 3, 10, 11, 47, 5, 718, DateTimeKind.Local).AddTicks(8154),
                            IdCollaborateur = 4,
                            IsClosed = true,
                            Priorite = "eaque",
                            Question = "praesentium"
                        },
                        new
                        {
                            Id = 10,
                            DateCreation = new DateTime(2020, 2, 17, 4, 23, 18, 829, DateTimeKind.Local).AddTicks(2339),
                            IdCollaborateur = 6,
                            IsClosed = true,
                            Priorite = "quidem",
                            Question = "est"
                        });
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeOfVerification")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdFonction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdRole")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdService")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Matricule")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdFonction");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdService");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodeOfVerification = "",
                            Email = "admin@hotmail.com",
                            EmailVerified = true,
                            IdFonction = 7,
                            IdRole = 1,
                            IdService = 14,
                            IsActive = true,
                            Matricule = "730533",
                            Nom = "Mourabit",
                            Password = "123",
                            Prenom = "mohamed"
                        },
                        new
                        {
                            Id = 2,
                            CodeOfVerification = "",
                            Email = "agentSI@angular.io",
                            EmailVerified = true,
                            IdFonction = 1,
                            IdRole = 2,
                            IdService = 14,
                            IsActive = true,
                            Matricule = "1042706",
                            Nom = "Hicham",
                            Password = "123",
                            Prenom = "Amakhlouf"
                        },
                        new
                        {
                            Id = 3,
                            CodeOfVerification = "",
                            Email = "user@angular.io",
                            EmailVerified = true,
                            IdFonction = 5,
                            IdRole = 2,
                            IdService = 11,
                            IsActive = true,
                            Matricule = "1059644",
                            Nom = "mehdi",
                            Password = "123",
                            Prenom = "tamika"
                        });
                });

            modelBuilder.Entity("Models.Affectation", b =>
                {
                    b.HasOne("Models.User", "AgentSi")
                        .WithMany("AgentSiAffectations")
                        .HasForeignKey("IdAgentSi")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.User", "Collaborateur")
                        .WithMany("CollaborateurAffectations")
                        .HasForeignKey("IdCollaborateur")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Emplacement", "Emplacement")
                        .WithMany("EmplacementAffectations")
                        .HasForeignKey("IdEmplacement")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Equipement", "Equipement")
                        .WithMany("EquipementAffectations")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Chat", b =>
                {
                    b.HasOne("Models.User", "Receiver")
                        .WithMany("ReceiverChats")
                        .HasForeignKey("IdReceiver")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.User", "Sender")
                        .WithMany("SenderChats")
                        .HasForeignKey("IdSender")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.TicketSupport", "TicketSupport")
                        .WithMany("TicketSupportChats")
                        .HasForeignKey("IdTicketSupport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Emplacement", b =>
                {
                    b.HasOne("Models.Departement", "Departement")
                        .WithMany("DepartementEmplacements")
                        .HasForeignKey("IdDepartement")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Equipement", b =>
                {
                    b.HasOne("Models.Categorie", "Categorie")
                        .WithMany("CategorieEquipements")
                        .HasForeignKey("IdCategorie")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Constucteur", "Constucteur")
                        .WithMany("ConstucteurEquipements")
                        .HasForeignKey("IdConstucteur")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Fournisseur", "Fournisseur")
                        .WithMany("FournisseurEquipements")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Statut", "Statut")
                        .WithMany("StatutEquipements")
                        .HasForeignKey("IdStatut")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Service", b =>
                {
                    b.HasOne("Models.Departement", "Departement")
                        .WithMany("DepartementServices")
                        .HasForeignKey("IdDepartement")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.TicketSupport", b =>
                {
                    b.HasOne("Models.User", "Collaborateur")
                        .WithMany("CollaborateurTicketSupports")
                        .HasForeignKey("IdCollaborateur")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Fonction", "Fonction")
                        .WithMany("FonctionCollaborateurs")
                        .HasForeignKey("IdFonction")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Service", "Service")
                        .WithMany("ServiceCollaborateurs")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.NoAction);
                });
#pragma warning restore 612, 618
        }
    }
}
